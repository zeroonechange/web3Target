// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.5.3. SEE SOURCE BELOW. !!
pragma solidity >=0.7.0 <0.9.0;

import "forge-std/Test.sol";
import "./interfaces/IBalancerVault.sol";
import "./interfaces/IERC20.sol";


/*
Running 1 test for test/Balancer_flashloan.sol:ContractTest
[PASS] testBalancer_flashloan() (gas: 69956)
Logs:
  Borrow USDC from balancer: 150000000000000
  USDC balance after repayying: 0

https://docs.balancer.fi/reference/contracts/flash-loans.html

 */
contract ContractTest is Test {
    IERC20 usdc = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);

    IBalancerVault vault = IBalancerVault(0xBA12222222228d8Ba445958a75a0704d566BF2C8);

    function setUp() public {
        vm.createSelectFork("https://eth-mainnet.g.alchemy.com/v2/qXFbrurfVJ5Le9N3T3HwEi8Wc06v0Ud3", 14684822);
    }

    function testBalancer_flashloan() public {
        address[] memory tokens = new address[](1);

        tokens[0] = address(usdc);

        uint256[] memory amounts = new uint256[](1);

        amounts[0] = 150000000 * 10 ** 6;

        vault.flashLoan(address(this), tokens, amounts, "");
    }

    function receiveFlashLoan(
        IERC20[] memory tokens,
        uint256[] memory amounts,
        uint256[] memory feeAmounts,
        bytes memory userData
    ) external {
        tokens;
        amounts;
        feeAmounts;
        userData;

        uint256 usdc_balance = usdc.balanceOf(address(this));
        console2.log("Borrow USDC from balancer", usdc_balance);
        usdc.transfer(address(vault), usdc_balance);

        usdc_balance = usdc.balanceOf(address(this));

        console2.log("USDC balance after repayying", usdc_balance);
    }
}
